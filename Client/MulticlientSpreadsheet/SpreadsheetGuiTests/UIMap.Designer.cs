// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGuiTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// a1 value is 10
        /// </summary>
        public void a1valueis10()
        {
            #region Variable Declarations
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.a1valueis10Params.UISpreadsheet1WindowExePath, this.a1valueis10Params.UISpreadsheet1WindowAlternateExePath);

            // Type '10' in 'cContent' text box
            uICContentEdit.Text = this.a1valueis10Params.UICContentEditText;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.a1valueis10Params.UICContentEditSendKeys, ModifierKeys.None);

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(45, 62));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(62, 44));

            // Double-Click 'sPanel' client
            Mouse.DoubleClick(uISPanelClient, new Point(62, 44));
        }
        
        /// <summary>
        /// a1is10 - Use 'a1is10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void a1is10()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals '10'
            Assert.AreEqual(this.a1is10ExpectedValues.UICValueEditText, uICValueEdit.Text, "A1 value not  10");
        }
        
        /// <summary>
        /// a2 is a1+a3+10 = 20
        /// </summary>
        public void a2isa1a310()
        {
            #region Variable Declarations
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            #endregion

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(44, 59));

            // Type '=a1+a3+10' in 'cContent' text box
            uICContentEdit.Text = this.a2isa1a310Params.UICContentEditText;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.a2isa1a310Params.UICContentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// a3 = 1000
        ///so a2 = 1020
        /// </summary>
        public void a3is1000()
        {
            #region Variable Declarations
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            #endregion

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(51, 85));

            // Type '1000' in 'cContent' text box
            uICContentEdit.Text = this.a3is1000Params.UICContentEditText;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.a3is1000Params.UICContentEditSendKeys, ModifierKeys.None);

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(78, 57));
        }
        
        /// <summary>
        /// a2is1020 - Use 'a2is1020ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void a2is1020()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals '1020'
            Assert.AreEqual(this.a2is1020ExpectedValues.UICValueEditText, uICValueEdit.Text, "Please work");
        }
        
        /// <summary>
        /// closeTest1
        /// </summary>
        public void closeTest1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            WinButton uINOButton = this.UIChangesNotSavedWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 17));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(35, 17));
        }
        
        /// <summary>
        /// a1isStringsoA2isString - Use 'a1isStringsoA2isStringParams' to pass parameters into this method.
        /// </summary>
        public void a1isStringsoA2isString()
        {
            #region Variable Declarations
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.a1isStringsoA2isStringParams.UISpreadsheet1WindowExePath, this.a1isStringsoA2isStringParams.UISpreadsheet1WindowAlternateExePath);

            // Type 'sdflkaj' in 'cContent' text box
            uICContentEdit.Text = this.a1isStringsoA2isStringParams.UICContentEditText;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.a1isStringsoA2isStringParams.UICContentEditSendKeys, ModifierKeys.None);

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(141, 38));

            // Type '=a1' in 'cContent' text box
            uICContentEdit.Text = this.a1isStringsoA2isStringParams.UICContentEditText1;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.a1isStringsoA2isStringParams.UICContentEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// closeTest2
        /// </summary>
        public void closeTest2()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            WinButton uINOButton = this.UIChangesNotSavedWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(31, 18));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(27, 10));
        }
        
        /// <summary>
        /// a2isStringfromA1 - Use 'a2isStringfromA1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void a2isStringfromA1()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals 'sdflkaj'
            Assert.AreEqual(this.a2isStringfromA1ExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// a1 is a string
        /// </summary>
        public void a1isadfaf()
        {
            #region Variable Declarations
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.a1isadfafParams.UISpreadsheet1WindowExePath, this.a1isadfafParams.UISpreadsheet1WindowAlternateExePath);

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(38, 36));

            // Type 'adfaf' in 'cContent' text box
            uICContentEdit.Text = this.a1isadfafParams.UICContentEditText;

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(130, 33));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(73, 41));
        }
        
        /// <summary>
        /// a1isString - Use 'a1isStringExpectedValues' to pass parameters into this method.
        /// </summary>
        public void a1isString()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals 'adfaf'
            Assert.AreEqual(this.a1isStringExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// a2isa1string - Use 'a2isa1stringParams' to pass parameters into this method.
        /// </summary>
        public void a2isa1string()
        {
            #region Variable Declarations
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            #endregion

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(130, 38));

            // Type '=a1' in 'cContent' text box
            uICContentEdit.Text = this.a2isa1stringParams.UICContentEditText;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.a2isa1stringParams.UICContentEditSendKeys, ModifierKeys.None);

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(145, 38));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(145, 38));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(203, 38));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(162, 41));
        }
        
        /// <summary>
        /// a1isa2stringcheck1 - Use 'a1isa2stringcheck1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void a1isa2stringcheck1()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals 'adfaf'
            Assert.AreEqual(this.a1isa2stringcheck1ExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// NoValueTest - Use 'NoValueTestParams' to pass parameters into this method.
        /// </summary>
        public void NoValueTest()
        {
            #region Variable Declarations
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.NoValueTestParams.UISpreadsheet1WindowExePath, this.NoValueTestParams.UISpreadsheet1WindowAlternateExePath);

            // Type 'afasdf' in 'cContent' text box
            uICContentEdit.Text = this.NoValueTestParams.UICContentEditText;

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(139, 40));

            // Type '=A1+3' in 'cContent' text box
            uICContentEdit.Text = this.NoValueTestParams.UICContentEditText1;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.NoValueTestParams.UICContentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// closeTest3 - Use 'closeTest3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void closeTest3()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals 'N/Value'
            Assert.AreEqual(this.closeTest3ExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// reclose
        /// </summary>
        public void reclose()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            WinButton uINOButton = this.UIChangesNotSavedWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 15));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(51, 10));
        }
        
        /// <summary>
        /// openTesting1 - Use 'openTesting1Params' to pass parameters into this method.
        /// </summary>
        public void openTesting1()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem1 = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem.UIOpenMenuItem1;
            WinEdit uINameEdit = this.UIOpenFileWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            WinMenuItem uIExitMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinButton uICancelButton = this.UIChangesNotSavedWindow.UICancelWindow.UICancelButton;
            WinMenuItem uINewWindowMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem.UINewWindowMenuItem;
            WinEdit uINameEdit1 = this.UIOpenFileWindow.UIItemWindow.UISpreadsheet1sprdListItem.UINameEdit;
            WinButton uICloseButton = this.UISpreadsheet1sprdWindow.UISpreadsheet1sprdTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            WinButton uIYesButton = this.UIChangesNotSavedWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.openTesting1Params.UISpreadsheet1WindowExePath, this.openTesting1Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'Open' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(73, 14));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(47, 15));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(149, 36));

            // Type 'dsfasdf' in 'cContent' text box
            uICContentEdit.Text = this.openTesting1Params.UICContentEditText;

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(59, 11));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(43, 17));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(201, 45));

            // Type 'sadfasdf' in 'cContent' text box
            uICContentEdit.Text = this.openTesting1Params.UICContentEditText1;

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(211, 85));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(111, 120));

            // Type 'wefw' in 'cContent' text box
            uICContentEdit.Text = this.openTesting1Params.UICContentEditText2;

            // Move 'sPanel' client
            Mouse.StartDragging(uISPanelClient, new Point(148, 144));
            Mouse.StopDragging(uISPanelClient, 13, -1);

            // Double-Click 'sPanel' client
            Mouse.DoubleClick(uISPanelClient, new Point(203, 94));

            // Type 'wfwef' in 'cContent' text box
            uICContentEdit.Text = this.openTesting1Params.UICContentEditText3;

            // Click 'File' -> 'Open' -> 'New Window' menu item
            Mouse.Click(uINewWindowMenuItem, new Point(67, 8));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(28, 16));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 19));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(15, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(47, 15));
        }
        
        /// <summary>
        /// openTesting2 - Use 'openTesting2Params' to pass parameters into this method.
        /// </summary>
        public void openTesting2()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem1 = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem.UIOpenMenuItem1;
            WinEdit uINameEdit = this.UIOpenFileWindow.UIItemWindow.UIProbstats1csprdListItem.UINameEdit;
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            WinMenuItem uINewWindowMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem.UINewWindowMenuItem;
            WinEdit uINameEdit1 = this.UIOpenFileWindow.UIItemWindow.UISpreadsheet1sprdListItem.UINameEdit;
            WinMenuBar uIMenuStrip1MenuBar = this.UISpreadsheet1sprdWindow.UIMenuStrip1Window.UIMenuStrip1MenuBar;
            WinEdit uICContentEdit1 = this.UISpreadsheet1sprdWindow.UICContentWindow.UICContentEdit;
            WinClient uISPanelClient1 = this.UISpreadsheet1sprdWindow.UIItemWindow.UISPanelClient;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.openTesting2Params.UISpreadsheet1WindowExePath, this.openTesting2Params.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'Open' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(52, 14));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(68, 10));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(283, 113));

            // Type 'sdfasdf' in 'cContent' text box
            uICContentEdit.Text = this.openTesting2Params.UICContentEditText;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.openTesting2Params.UICContentEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open' -> 'New Window' menu item
            Mouse.Click(uINewWindowMenuItem, new Point(57, 4));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(44, 17));

            // Move 'menuStrip1' menu bar to 'cContent' text box
            uICContentEdit1.EnsureClickable(new Point(134, 0));
            Mouse.StartDragging(uIMenuStrip1MenuBar, new Point(218, 13));
            Mouse.StopDragging(uICContentEdit1, new Point(134, 0));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient1, new Point(128, 67));

            // Type 'I am not having fun ' in 'cContent' text box
            uICContentEdit1.Text = this.openTesting2Params.UICContentEditText1;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit1, this.openTesting2Params.UICContentEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// NotHavingFUn - Use 'NotHavingFUnExpectedValues' to pass parameters into this method.
        /// </summary>
        public void NotHavingFUn()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1sprdWindow.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals 'I am not having fun '
            Assert.AreEqual(this.NotHavingFUnExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// reOpenTest1
        /// </summary>
        public void reOpenTest1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheet1sprdWindow.UISpreadsheet1sprdTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIChangesNotSavedWindow.UIYesWindow.UIYesButton;
            WinMenuItem uINewWindowMenuItem = this.UIProbstats1csprdWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem.UINewWindowMenuItem;
            WinEdit uINameEdit = this.UIOpenFileWindow.UIItemWindow.UISpreadsheet1sprdListItem.UINameEdit;
            WinClient uISPanelClient = this.UISpreadsheet1sprdWindow.UIItemWindow.UISPanelClient;
            WinEdit uICValueEdit = this.UISpreadsheet1sprdWindow.UICValueWindow.UICValueEdit;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(47, 14));

            // Click 'File' -> 'Open' -> 'New Window' menu item
            Mouse.Click(uINewWindowMenuItem, new Point(41, 4));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(41, 20));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(143, 56));

            // Click 'cValue' text box
            Mouse.Click(uICValueEdit, new Point(44, 13));

            // Click 'cValue' text box
            Mouse.Click(uICValueEdit, new Point(117, 13));
        }
        
        /// <summary>
        /// SaveWork - Use 'SaveWorkExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SaveWork()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1sprdWindow.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals 'I am not having fun '
            Assert.AreEqual(this.SaveWorkExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// bigTest1 - Use 'bigTest1Params' to pass parameters into this method.
        /// </summary>
        public void bigTest1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheet1sprdWindow.UISpreadsheet1sprdTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UIProbstats1csprdWindow.UIProbstats1csprdTitleBar.UICloseButton;
            WinButton uICancelButton = this.UIChangesNotSavedWindow.UICancelWindow.UICancelButton;
            WinClient uISPanelClient = this.UIProbstats1csprdWindow.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit = this.UIProbstats1csprdWindow.UICContentWindow.UICContentEdit;
            WinButton uINOButton = this.UIChangesNotSavedWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(12, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(29, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(24, 8));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(312, 123));

            // Type 'Control + c' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.bigTest1Params.UICContentEditSendKeys, ModifierKeys.Control);

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(308, 92));

            // Type 'sdfasdf' in 'cContent' text box
            uICContentEdit.Text = this.bigTest1Params.UICContentEditText;

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(300, 175));

            // Type '{Right}{Up}{Down}{Down}{Right}{Up}{Left}{Down}{Down}{Left}{Right}{Up}{Left}{Up}{Left}{Right}{Left}{Down}{Right}{Up}{Left}{Up}{Left}{Up}{Right}{Left}{Down}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.bigTest1Params.UICContentEditSendKeys1, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(27, 14));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(29, 5));
        }
        
        /// <summary>
        /// TestingMenuFuctionality - Use 'TestingMenuFuctionalityParams' to pass parameters into this method.
        /// </summary>
        public void TestingMenuFuctionality()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem1 = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem.UIOpenMenuItem1;
            WinEdit uINameEdit = this.UIOpenFileWindow.UIItemWindow.UISavetsprdListItem.UINameEdit;
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            WinMenuItem uIFileMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            WinButton uIYesButton = this.UIChangesNotSavedWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UIOpenFileWindow.UIItemWindow1.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenFileWindow.UIItemWindow11.UIFilenameEdit;
            WinPane uIOpenFilePane = this.UIOpenFileWindow2.UIOpenFileDialog.UIOpenFilePane;
            WinButton uIOKButton = this.UIOpenFileWindow2.UIOpenFilePane.UIOKButton;
            WinComboBox uIFilenameComboBox1 = this.UIOpenFileWindow.UIItemWindow2.UIFilenameComboBox;
            WinEdit uINameEdit1 = this.UIOpenFileWindow.UIItemWindow21.UISavetsprdListItem.UINameEdit;
            WinButton uIOpenButton = this.UIOpenFileWindow.UIOpenWindow.UIOpenButton;
            WinButton uICancelButton = this.UIChangesNotSavedWindow.UICancelWindow.UICancelButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UISpreadsheet2Window.UISpreadsheet2TitleBar.UICloseButton;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinButton uIOKButton1 = this.UIHELPWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIEditMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIEditMenuItem;
            WinMenuItem uIExitMenuItem = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinButton uINOButton = this.UIChangesNotSavedWindow.UINOWindow.UINOButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.TestingMenuFuctionalityParams.UISpreadsheet1WindowExePath, this.TestingMenuFuctionalityParams.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'Open' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(86, 11));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(76, 10));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(156, 64));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(285, 132));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(22, 10));

            // Move 'sPanel' client
            Mouse.StartDragging(uISPanelClient, new Point(352, 174));
            Mouse.StopDragging(uISPanelClient, -6, 3);

            // Type 'dfasd' in 'cContent' text box
            uICContentEdit.Text = this.TestingMenuFuctionalityParams.UICContentEditText;

            // Click 'File' -> 'Open' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(86, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(32, 14));

            // Select 'randomtest1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.TestingMenuFuctionalityParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.TestingMenuFuctionalityParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'Open File' pane
            Mouse.Click(uIOpenFilePane, new Point(270, 99));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 10));

            // Select 'savet.sprd' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.TestingMenuFuctionalityParams.UIFilenameComboBoxEditableItem1;

            // Click 'Name' text box
            Mouse.Click(uINameEdit1, new Point(5, 12));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(42, 22));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(21, 14));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(283, 148));

            // Type 'fdsfdsf' in 'cContent' text box
            uICContentEdit.Text = this.TestingMenuFuctionalityParams.UICContentEditText1;

            // Click 'File' -> 'Open' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(60, 18));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(26, 18));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(51, 9));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 4));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(16, 6));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(36, 4));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(51, 10));

            // Click 'Edit' menu item
            Mouse.Click(uIEditMenuItem, new Point(6, 6));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(132, 10));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(51, 19));
        }
        
        /// <summary>
        /// a1is1 - Use 'a1is1Params' to pass parameters into this method.
        /// </summary>
        public void a1is1()
        {
            #region Variable Declarations
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.a1is1Params.UISpreadsheet1WindowExePath, this.a1is1Params.UISpreadsheet1WindowAlternateExePath);

            // Type '=a2+1' in 'cContent' text box
            uICContentEdit.Text = this.a1is1Params.UICContentEditText;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.a1is1Params.UICContentEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// a1is1check - Use 'a1is1checkExpectedValues' to pass parameters into this method.
        /// </summary>
        public void a1is1check()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals '1'
            Assert.AreEqual(this.a1is1checkExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// a1is1still - Use 'a1is1stillParams' to pass parameters into this method.
        /// </summary>
        public void a1is1still()
        {
            #region Variable Declarations
            WinEdit uICContentEdit = this.UISpreadsheet1Window.UICContentWindow.UICContentEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            #endregion

            // Type '=a2+a1' in 'cContent' text box
            uICContentEdit.Text = this.a1is1stillParams.UICContentEditText;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit, this.a1is1stillParams.UICContentEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(48, 19));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(156, 49));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(62, 47));
        }
        
        /// <summary>
        /// circularTest - Use 'circularTestExpectedValues' to pass parameters into this method.
        /// </summary>
        public void circularTest()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals '1'
            Assert.AreEqual(this.circularTestExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// clear - Use 'clearParams' to pass parameters into this method.
        /// </summary>
        public void clear()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem1 = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem.UIOpenMenuItem1;
            WinEdit uINameEdit = this.UIOpenFileWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinClient uISPanelClient = this.UISpreadsheet1Window.UIItemWindow.UISPanelClient;
            WinMenuItem uIEmptySpreadsheetMenuItem = this.UIItemWindow1.UIDropDownMenu.UIEmptySpreadsheetMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheet1Window = ApplicationUnderTest.Launch(this.clearParams.UISpreadsheet1WindowExePath, this.clearParams.UISpreadsheet1WindowAlternateExePath);

            // Click 'File' -> 'Open' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(70, 20));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(53, 6));

            // Right-Click 'sPanel' client
            Mouse.Click(uISPanelClient, MouseButtons.Right, ModifierKeys.None, new Point(285, 173));

            // Click 'Empty Spreadsheet' menu item
            Mouse.Click(uIEmptySpreadsheetMenuItem, new Point(54, 6));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals ''
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// closeTest4
        /// </summary>
        public void closeTest4()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheet1Window.UISpreadsheet1TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(41, 13));
        }
        
        /// <summary>
        /// clearCheck - Use 'clearCheckExpectedValues' to pass parameters into this method.
        /// </summary>
        public void clearCheck()
        {
            #region Variable Declarations
            WinEdit uICValueEdit = this.UISpreadsheet1Window.UICValueWindow.UICValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cValue' text box equals ''
            Assert.AreEqual(this.clearCheckExpectedValues.UICValueEditText, uICValueEdit.Text);
        }
        
        /// <summary>
        /// clear2 - Use 'clear2Params' to pass parameters into this method.
        /// </summary>
        public void clear2()
        {
            #region Variable Declarations
            WinClient uISPanelClient = this.UITestsprdWindow.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit = this.UITestsprdWindow1.UICContentWindow.UICContentEdit;
            WinEdit uICContentEdit1 = this.UITestsprdWindow2.UICContentWindow.UICContentEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinClient uISPanelClient1 = this.UITestsprdWindow3.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit2 = this.UITestsprdWindow4.UICContentWindow.UICContentEdit;
            WinEdit uICContentEdit3 = this.UITestsprdWindow5.UICContentWindow.UICContentEdit;
            WinClient uISPanelClient2 = this.UITestsprdWindow6.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit4 = this.UITestsprdWindow7.UICContentWindow.UICContentEdit;
            WinEdit uICContentEdit5 = this.UITestsprdWindow8.UICContentWindow.UICContentEdit;
            WinClient uISPanelClient3 = this.UITestsprdWindow9.UIItemWindow.UISPanelClient;
            WinClient uISPanelClient4 = this.UITestsprdWindow10.UIItemWindow.UISPanelClient;
            WinClient uISPanelClient5 = this.UITestsprdWindow11.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit6 = this.UITestsprdWindow12.UICContentWindow.UICContentEdit;
            WinEdit uICContentEdit7 = this.UITestsprdWindow13.UICContentWindow.UICContentEdit;
            WinClient uISPanelClient6 = this.UITestsprdWindow14.UIItemWindow.UISPanelClient;
            WinClient uISPanelClient7 = this.UITestsprdWindow15.UIItemWindow.UISPanelClient;
            WinEdit uICContentEdit8 = this.UITestsprdWindow16.UICContentWindow.UICContentEdit;
            WinEdit uICContentEdit9 = this.UITestsprdWindow17.UICContentWindow.UICContentEdit;
            WinClient uISPanelClient8 = this.UITestsprdWindow18.UIItemWindow.UISPanelClient;
            WinClient uISPanelClient9 = this.UITestsprdWindow19.UIItemWindow.UISPanelClient;
            WinClient uISPanelClient10 = this.UITestsprdWindow20.UIItemWindow.UISPanelClient;
            WinMenuItem uISaveMenuItem = this.UITestsprdWindow21.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinMenuItem uISaveAsMenuItem = this.UITestsprdWindow22.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveSpreadsheetFilesWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveSpreadsheetFilesWindow.UIItemWindow.UIFilenameEdit;
            WinMenuItem uIOpenMenuItem1 = this.UISpreadsheet1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem.UIOpenMenuItem1;
            WinEdit uINameEdit = this.UIOpenFileWindow.UIItemWindow.UIProbstats1csprdListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveSpreadsheetFilesWindow.UISaveWindow.UISaveButton;
            WinMenuItem uIFileMenuItem = this.UITestsprdWindow23.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinClient uISPanelClient11 = this.UITestsprdWindow24.UIItemWindow.UISPanelClient;
            WinButton uICloseButton = this.UITestsprdWindow25.UICUsersBharathDesktopTitleBar.UICloseButton;
            WinButton uICancelButton = this.UIChangesNotSavedWindow.UICancelWindow.UICancelButton;
            WinButton uICloseButton1 = this.UITestsprdWindow26.UICUsersBharathDesktopTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIChangesNotSavedWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient, new Point(156, 80));

            // Type '=sakjfl' in 'cContent' text box
            uICContentEdit.Text = this.clear2Params.UICContentEditText;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit1, this.clear2Params.UICContentEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(78, 11));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient1, new Point(157, 58));

            // Type '=b2+b2' in 'cContent' text box
            uICContentEdit2.Text = this.clear2Params.UICContentEditText1;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit3, this.clear2Params.UICContentEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(30, 13));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient2, new Point(143, 87));

            // Type 'b1+2' in 'cContent' text box
            uICContentEdit4.Text = this.clear2Params.UICContentEditText2;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit5, this.clear2Params.UICContentEditSendKeys2, ModifierKeys.None);

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient3, new Point(164, 114));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient4, new Point(112, 88));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient5, new Point(114, 81));

            // Type '=b1+2' in 'cContent' text box
            uICContentEdit6.Text = this.clear2Params.UICContentEditText3;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit7, this.clear2Params.UICContentEditSendKeys3, ModifierKeys.None);

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient6, new Point(134, 81));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient7, new Point(151, 78));

            // Type '=b3' in 'cContent' text box
            uICContentEdit8.Text = this.clear2Params.UICContentEditText4;

            // Type '{Enter}' in 'cContent' text box
            Keyboard.SendKeys(uICContentEdit9, this.clear2Params.UICContentEditSendKeys4, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(38, 7));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient8, new Point(252, 167));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient9, new Point(177, 20));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient10, new Point(205, 60));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(57, 10));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(112, 13));

            // Select 'idont know' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.clear2Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.clear2Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(78, 13));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(41, 10));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(47, 18));

            // Select 'sdf' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.clear2Params.UIFilenameComboBoxEditableItem1;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(29, 15));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(25, 3));

            // Click 'sPanel' client
            Mouse.Click(uISPanelClient11, new Point(296, 144));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(15, 17));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(41, 17));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(16, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(27, 6));
        }
        
        #region Properties
        public virtual a1valueis10Params a1valueis10Params
        {
            get
            {
                if ((this.ma1valueis10Params == null))
                {
                    this.ma1valueis10Params = new a1valueis10Params();
                }
                return this.ma1valueis10Params;
            }
        }
        
        public virtual a1is10ExpectedValues a1is10ExpectedValues
        {
            get
            {
                if ((this.ma1is10ExpectedValues == null))
                {
                    this.ma1is10ExpectedValues = new a1is10ExpectedValues();
                }
                return this.ma1is10ExpectedValues;
            }
        }
        
        public virtual a2isa1a310Params a2isa1a310Params
        {
            get
            {
                if ((this.ma2isa1a310Params == null))
                {
                    this.ma2isa1a310Params = new a2isa1a310Params();
                }
                return this.ma2isa1a310Params;
            }
        }
        
        public virtual a3is1000Params a3is1000Params
        {
            get
            {
                if ((this.ma3is1000Params == null))
                {
                    this.ma3is1000Params = new a3is1000Params();
                }
                return this.ma3is1000Params;
            }
        }
        
        public virtual a2is1020ExpectedValues a2is1020ExpectedValues
        {
            get
            {
                if ((this.ma2is1020ExpectedValues == null))
                {
                    this.ma2is1020ExpectedValues = new a2is1020ExpectedValues();
                }
                return this.ma2is1020ExpectedValues;
            }
        }
        
        public virtual a1isStringsoA2isStringParams a1isStringsoA2isStringParams
        {
            get
            {
                if ((this.ma1isStringsoA2isStringParams == null))
                {
                    this.ma1isStringsoA2isStringParams = new a1isStringsoA2isStringParams();
                }
                return this.ma1isStringsoA2isStringParams;
            }
        }
        
        public virtual a2isStringfromA1ExpectedValues a2isStringfromA1ExpectedValues
        {
            get
            {
                if ((this.ma2isStringfromA1ExpectedValues == null))
                {
                    this.ma2isStringfromA1ExpectedValues = new a2isStringfromA1ExpectedValues();
                }
                return this.ma2isStringfromA1ExpectedValues;
            }
        }
        
        public virtual a1isadfafParams a1isadfafParams
        {
            get
            {
                if ((this.ma1isadfafParams == null))
                {
                    this.ma1isadfafParams = new a1isadfafParams();
                }
                return this.ma1isadfafParams;
            }
        }
        
        public virtual a1isStringExpectedValues a1isStringExpectedValues
        {
            get
            {
                if ((this.ma1isStringExpectedValues == null))
                {
                    this.ma1isStringExpectedValues = new a1isStringExpectedValues();
                }
                return this.ma1isStringExpectedValues;
            }
        }
        
        public virtual a2isa1stringParams a2isa1stringParams
        {
            get
            {
                if ((this.ma2isa1stringParams == null))
                {
                    this.ma2isa1stringParams = new a2isa1stringParams();
                }
                return this.ma2isa1stringParams;
            }
        }
        
        public virtual a1isa2stringcheck1ExpectedValues a1isa2stringcheck1ExpectedValues
        {
            get
            {
                if ((this.ma1isa2stringcheck1ExpectedValues == null))
                {
                    this.ma1isa2stringcheck1ExpectedValues = new a1isa2stringcheck1ExpectedValues();
                }
                return this.ma1isa2stringcheck1ExpectedValues;
            }
        }
        
        public virtual NoValueTestParams NoValueTestParams
        {
            get
            {
                if ((this.mNoValueTestParams == null))
                {
                    this.mNoValueTestParams = new NoValueTestParams();
                }
                return this.mNoValueTestParams;
            }
        }
        
        public virtual closeTest3ExpectedValues closeTest3ExpectedValues
        {
            get
            {
                if ((this.mcloseTest3ExpectedValues == null))
                {
                    this.mcloseTest3ExpectedValues = new closeTest3ExpectedValues();
                }
                return this.mcloseTest3ExpectedValues;
            }
        }
        
        public virtual openTesting1Params openTesting1Params
        {
            get
            {
                if ((this.mopenTesting1Params == null))
                {
                    this.mopenTesting1Params = new openTesting1Params();
                }
                return this.mopenTesting1Params;
            }
        }
        
        public virtual openTesting2Params openTesting2Params
        {
            get
            {
                if ((this.mopenTesting2Params == null))
                {
                    this.mopenTesting2Params = new openTesting2Params();
                }
                return this.mopenTesting2Params;
            }
        }
        
        public virtual NotHavingFUnExpectedValues NotHavingFUnExpectedValues
        {
            get
            {
                if ((this.mNotHavingFUnExpectedValues == null))
                {
                    this.mNotHavingFUnExpectedValues = new NotHavingFUnExpectedValues();
                }
                return this.mNotHavingFUnExpectedValues;
            }
        }
        
        public virtual SaveWorkExpectedValues SaveWorkExpectedValues
        {
            get
            {
                if ((this.mSaveWorkExpectedValues == null))
                {
                    this.mSaveWorkExpectedValues = new SaveWorkExpectedValues();
                }
                return this.mSaveWorkExpectedValues;
            }
        }
        
        public virtual bigTest1Params bigTest1Params
        {
            get
            {
                if ((this.mbigTest1Params == null))
                {
                    this.mbigTest1Params = new bigTest1Params();
                }
                return this.mbigTest1Params;
            }
        }
        
        public virtual TestingMenuFuctionalityParams TestingMenuFuctionalityParams
        {
            get
            {
                if ((this.mTestingMenuFuctionalityParams == null))
                {
                    this.mTestingMenuFuctionalityParams = new TestingMenuFuctionalityParams();
                }
                return this.mTestingMenuFuctionalityParams;
            }
        }
        
        public virtual a1is1Params a1is1Params
        {
            get
            {
                if ((this.ma1is1Params == null))
                {
                    this.ma1is1Params = new a1is1Params();
                }
                return this.ma1is1Params;
            }
        }
        
        public virtual a1is1checkExpectedValues a1is1checkExpectedValues
        {
            get
            {
                if ((this.ma1is1checkExpectedValues == null))
                {
                    this.ma1is1checkExpectedValues = new a1is1checkExpectedValues();
                }
                return this.ma1is1checkExpectedValues;
            }
        }
        
        public virtual a1is1stillParams a1is1stillParams
        {
            get
            {
                if ((this.ma1is1stillParams == null))
                {
                    this.ma1is1stillParams = new a1is1stillParams();
                }
                return this.ma1is1stillParams;
            }
        }
        
        public virtual circularTestExpectedValues circularTestExpectedValues
        {
            get
            {
                if ((this.mcircularTestExpectedValues == null))
                {
                    this.mcircularTestExpectedValues = new circularTestExpectedValues();
                }
                return this.mcircularTestExpectedValues;
            }
        }
        
        public virtual clearParams clearParams
        {
            get
            {
                if ((this.mclearParams == null))
                {
                    this.mclearParams = new clearParams();
                }
                return this.mclearParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual clearCheckExpectedValues clearCheckExpectedValues
        {
            get
            {
                if ((this.mclearCheckExpectedValues == null))
                {
                    this.mclearCheckExpectedValues = new clearCheckExpectedValues();
                }
                return this.mclearCheckExpectedValues;
            }
        }
        
        public virtual clear2Params clear2Params
        {
            get
            {
                if ((this.mclear2Params == null))
                {
                    this.mclear2Params = new clear2Params();
                }
                return this.mclear2Params;
            }
        }
        
        public UISpreadsheet1Window UISpreadsheet1Window
        {
            get
            {
                if ((this.mUISpreadsheet1Window == null))
                {
                    this.mUISpreadsheet1Window = new UISpreadsheet1Window();
                }
                return this.mUISpreadsheet1Window;
            }
        }
        
        public UIChangesNotSavedWindow UIChangesNotSavedWindow
        {
            get
            {
                if ((this.mUIChangesNotSavedWindow == null))
                {
                    this.mUIChangesNotSavedWindow = new UIChangesNotSavedWindow();
                }
                return this.mUIChangesNotSavedWindow;
            }
        }
        
        public UIOpenFileWindow UIOpenFileWindow
        {
            get
            {
                if ((this.mUIOpenFileWindow == null))
                {
                    this.mUIOpenFileWindow = new UIOpenFileWindow();
                }
                return this.mUIOpenFileWindow;
            }
        }
        
        public UISpreadsheet1sprdWindow UISpreadsheet1sprdWindow
        {
            get
            {
                if ((this.mUISpreadsheet1sprdWindow == null))
                {
                    this.mUISpreadsheet1sprdWindow = new UISpreadsheet1sprdWindow();
                }
                return this.mUISpreadsheet1sprdWindow;
            }
        }
        
        public UIProbstats1csprdWindow UIProbstats1csprdWindow
        {
            get
            {
                if ((this.mUIProbstats1csprdWindow == null))
                {
                    this.mUIProbstats1csprdWindow = new UIProbstats1csprdWindow();
                }
                return this.mUIProbstats1csprdWindow;
            }
        }
        
        public UIOpenFileWindow2 UIOpenFileWindow2
        {
            get
            {
                if ((this.mUIOpenFileWindow2 == null))
                {
                    this.mUIOpenFileWindow2 = new UIOpenFileWindow2();
                }
                return this.mUIOpenFileWindow2;
            }
        }
        
        public UISpreadsheet2Window UISpreadsheet2Window
        {
            get
            {
                if ((this.mUISpreadsheet2Window == null))
                {
                    this.mUISpreadsheet2Window = new UISpreadsheet2Window();
                }
                return this.mUISpreadsheet2Window;
            }
        }
        
        public UIHELPWindow UIHELPWindow
        {
            get
            {
                if ((this.mUIHELPWindow == null))
                {
                    this.mUIHELPWindow = new UIHELPWindow();
                }
                return this.mUIHELPWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISaveSpreadsheetFilesWindow UISaveSpreadsheetFilesWindow
        {
            get
            {
                if ((this.mUISaveSpreadsheetFilesWindow == null))
                {
                    this.mUISaveSpreadsheetFilesWindow = new UISaveSpreadsheetFilesWindow();
                }
                return this.mUISaveSpreadsheetFilesWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UITestsprdWindow UITestsprdWindow
        {
            get
            {
                if ((this.mUITestsprdWindow == null))
                {
                    this.mUITestsprdWindow = new UITestsprdWindow();
                }
                return this.mUITestsprdWindow;
            }
        }
        
        public UITestsprdWindow1 UITestsprdWindow1
        {
            get
            {
                if ((this.mUITestsprdWindow1 == null))
                {
                    this.mUITestsprdWindow1 = new UITestsprdWindow1();
                }
                return this.mUITestsprdWindow1;
            }
        }
        
        public UITestsprdWindow2 UITestsprdWindow2
        {
            get
            {
                if ((this.mUITestsprdWindow2 == null))
                {
                    this.mUITestsprdWindow2 = new UITestsprdWindow2();
                }
                return this.mUITestsprdWindow2;
            }
        }
        
        public UITestsprdWindow3 UITestsprdWindow3
        {
            get
            {
                if ((this.mUITestsprdWindow3 == null))
                {
                    this.mUITestsprdWindow3 = new UITestsprdWindow3();
                }
                return this.mUITestsprdWindow3;
            }
        }
        
        public UITestsprdWindow4 UITestsprdWindow4
        {
            get
            {
                if ((this.mUITestsprdWindow4 == null))
                {
                    this.mUITestsprdWindow4 = new UITestsprdWindow4();
                }
                return this.mUITestsprdWindow4;
            }
        }
        
        public UITestsprdWindow5 UITestsprdWindow5
        {
            get
            {
                if ((this.mUITestsprdWindow5 == null))
                {
                    this.mUITestsprdWindow5 = new UITestsprdWindow5();
                }
                return this.mUITestsprdWindow5;
            }
        }
        
        public UITestsprdWindow6 UITestsprdWindow6
        {
            get
            {
                if ((this.mUITestsprdWindow6 == null))
                {
                    this.mUITestsprdWindow6 = new UITestsprdWindow6();
                }
                return this.mUITestsprdWindow6;
            }
        }
        
        public UITestsprdWindow7 UITestsprdWindow7
        {
            get
            {
                if ((this.mUITestsprdWindow7 == null))
                {
                    this.mUITestsprdWindow7 = new UITestsprdWindow7();
                }
                return this.mUITestsprdWindow7;
            }
        }
        
        public UITestsprdWindow8 UITestsprdWindow8
        {
            get
            {
                if ((this.mUITestsprdWindow8 == null))
                {
                    this.mUITestsprdWindow8 = new UITestsprdWindow8();
                }
                return this.mUITestsprdWindow8;
            }
        }
        
        public UITestsprdWindow9 UITestsprdWindow9
        {
            get
            {
                if ((this.mUITestsprdWindow9 == null))
                {
                    this.mUITestsprdWindow9 = new UITestsprdWindow9();
                }
                return this.mUITestsprdWindow9;
            }
        }
        
        public UITestsprdWindow10 UITestsprdWindow10
        {
            get
            {
                if ((this.mUITestsprdWindow10 == null))
                {
                    this.mUITestsprdWindow10 = new UITestsprdWindow10();
                }
                return this.mUITestsprdWindow10;
            }
        }
        
        public UITestsprdWindow11 UITestsprdWindow11
        {
            get
            {
                if ((this.mUITestsprdWindow11 == null))
                {
                    this.mUITestsprdWindow11 = new UITestsprdWindow11();
                }
                return this.mUITestsprdWindow11;
            }
        }
        
        public UITestsprdWindow12 UITestsprdWindow12
        {
            get
            {
                if ((this.mUITestsprdWindow12 == null))
                {
                    this.mUITestsprdWindow12 = new UITestsprdWindow12();
                }
                return this.mUITestsprdWindow12;
            }
        }
        
        public UITestsprdWindow13 UITestsprdWindow13
        {
            get
            {
                if ((this.mUITestsprdWindow13 == null))
                {
                    this.mUITestsprdWindow13 = new UITestsprdWindow13();
                }
                return this.mUITestsprdWindow13;
            }
        }
        
        public UITestsprdWindow14 UITestsprdWindow14
        {
            get
            {
                if ((this.mUITestsprdWindow14 == null))
                {
                    this.mUITestsprdWindow14 = new UITestsprdWindow14();
                }
                return this.mUITestsprdWindow14;
            }
        }
        
        public UITestsprdWindow15 UITestsprdWindow15
        {
            get
            {
                if ((this.mUITestsprdWindow15 == null))
                {
                    this.mUITestsprdWindow15 = new UITestsprdWindow15();
                }
                return this.mUITestsprdWindow15;
            }
        }
        
        public UITestsprdWindow16 UITestsprdWindow16
        {
            get
            {
                if ((this.mUITestsprdWindow16 == null))
                {
                    this.mUITestsprdWindow16 = new UITestsprdWindow16();
                }
                return this.mUITestsprdWindow16;
            }
        }
        
        public UITestsprdWindow17 UITestsprdWindow17
        {
            get
            {
                if ((this.mUITestsprdWindow17 == null))
                {
                    this.mUITestsprdWindow17 = new UITestsprdWindow17();
                }
                return this.mUITestsprdWindow17;
            }
        }
        
        public UITestsprdWindow18 UITestsprdWindow18
        {
            get
            {
                if ((this.mUITestsprdWindow18 == null))
                {
                    this.mUITestsprdWindow18 = new UITestsprdWindow18();
                }
                return this.mUITestsprdWindow18;
            }
        }
        
        public UITestsprdWindow19 UITestsprdWindow19
        {
            get
            {
                if ((this.mUITestsprdWindow19 == null))
                {
                    this.mUITestsprdWindow19 = new UITestsprdWindow19();
                }
                return this.mUITestsprdWindow19;
            }
        }
        
        public UITestsprdWindow20 UITestsprdWindow20
        {
            get
            {
                if ((this.mUITestsprdWindow20 == null))
                {
                    this.mUITestsprdWindow20 = new UITestsprdWindow20();
                }
                return this.mUITestsprdWindow20;
            }
        }
        
        public UITestsprdWindow21 UITestsprdWindow21
        {
            get
            {
                if ((this.mUITestsprdWindow21 == null))
                {
                    this.mUITestsprdWindow21 = new UITestsprdWindow21();
                }
                return this.mUITestsprdWindow21;
            }
        }
        
        public UITestsprdWindow22 UITestsprdWindow22
        {
            get
            {
                if ((this.mUITestsprdWindow22 == null))
                {
                    this.mUITestsprdWindow22 = new UITestsprdWindow22();
                }
                return this.mUITestsprdWindow22;
            }
        }
        
        public UITestsprdWindow23 UITestsprdWindow23
        {
            get
            {
                if ((this.mUITestsprdWindow23 == null))
                {
                    this.mUITestsprdWindow23 = new UITestsprdWindow23();
                }
                return this.mUITestsprdWindow23;
            }
        }
        
        public UITestsprdWindow24 UITestsprdWindow24
        {
            get
            {
                if ((this.mUITestsprdWindow24 == null))
                {
                    this.mUITestsprdWindow24 = new UITestsprdWindow24();
                }
                return this.mUITestsprdWindow24;
            }
        }
        
        public UITestsprdWindow25 UITestsprdWindow25
        {
            get
            {
                if ((this.mUITestsprdWindow25 == null))
                {
                    this.mUITestsprdWindow25 = new UITestsprdWindow25();
                }
                return this.mUITestsprdWindow25;
            }
        }
        
        public UITestsprdWindow26 UITestsprdWindow26
        {
            get
            {
                if ((this.mUITestsprdWindow26 == null))
                {
                    this.mUITestsprdWindow26 = new UITestsprdWindow26();
                }
                return this.mUITestsprdWindow26;
            }
        }
        #endregion
        
        #region Fields
        private a1valueis10Params ma1valueis10Params;
        
        private a1is10ExpectedValues ma1is10ExpectedValues;
        
        private a2isa1a310Params ma2isa1a310Params;
        
        private a3is1000Params ma3is1000Params;
        
        private a2is1020ExpectedValues ma2is1020ExpectedValues;
        
        private a1isStringsoA2isStringParams ma1isStringsoA2isStringParams;
        
        private a2isStringfromA1ExpectedValues ma2isStringfromA1ExpectedValues;
        
        private a1isadfafParams ma1isadfafParams;
        
        private a1isStringExpectedValues ma1isStringExpectedValues;
        
        private a2isa1stringParams ma2isa1stringParams;
        
        private a1isa2stringcheck1ExpectedValues ma1isa2stringcheck1ExpectedValues;
        
        private NoValueTestParams mNoValueTestParams;
        
        private closeTest3ExpectedValues mcloseTest3ExpectedValues;
        
        private openTesting1Params mopenTesting1Params;
        
        private openTesting2Params mopenTesting2Params;
        
        private NotHavingFUnExpectedValues mNotHavingFUnExpectedValues;
        
        private SaveWorkExpectedValues mSaveWorkExpectedValues;
        
        private bigTest1Params mbigTest1Params;
        
        private TestingMenuFuctionalityParams mTestingMenuFuctionalityParams;
        
        private a1is1Params ma1is1Params;
        
        private a1is1checkExpectedValues ma1is1checkExpectedValues;
        
        private a1is1stillParams ma1is1stillParams;
        
        private circularTestExpectedValues mcircularTestExpectedValues;
        
        private clearParams mclearParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private clearCheckExpectedValues mclearCheckExpectedValues;
        
        private clear2Params mclear2Params;
        
        private UISpreadsheet1Window mUISpreadsheet1Window;
        
        private UIChangesNotSavedWindow mUIChangesNotSavedWindow;
        
        private UIOpenFileWindow mUIOpenFileWindow;
        
        private UISpreadsheet1sprdWindow mUISpreadsheet1sprdWindow;
        
        private UIProbstats1csprdWindow mUIProbstats1csprdWindow;
        
        private UIOpenFileWindow2 mUIOpenFileWindow2;
        
        private UISpreadsheet2Window mUISpreadsheet2Window;
        
        private UIHELPWindow mUIHELPWindow;
        
        private UIOKWindow1 mUIOKWindow;
        
        private UISaveSpreadsheetFilesWindow mUISaveSpreadsheetFilesWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UITestsprdWindow mUITestsprdWindow;
        
        private UITestsprdWindow1 mUITestsprdWindow1;
        
        private UITestsprdWindow2 mUITestsprdWindow2;
        
        private UITestsprdWindow3 mUITestsprdWindow3;
        
        private UITestsprdWindow4 mUITestsprdWindow4;
        
        private UITestsprdWindow5 mUITestsprdWindow5;
        
        private UITestsprdWindow6 mUITestsprdWindow6;
        
        private UITestsprdWindow7 mUITestsprdWindow7;
        
        private UITestsprdWindow8 mUITestsprdWindow8;
        
        private UITestsprdWindow9 mUITestsprdWindow9;
        
        private UITestsprdWindow10 mUITestsprdWindow10;
        
        private UITestsprdWindow11 mUITestsprdWindow11;
        
        private UITestsprdWindow12 mUITestsprdWindow12;
        
        private UITestsprdWindow13 mUITestsprdWindow13;
        
        private UITestsprdWindow14 mUITestsprdWindow14;
        
        private UITestsprdWindow15 mUITestsprdWindow15;
        
        private UITestsprdWindow16 mUITestsprdWindow16;
        
        private UITestsprdWindow17 mUITestsprdWindow17;
        
        private UITestsprdWindow18 mUITestsprdWindow18;
        
        private UITestsprdWindow19 mUITestsprdWindow19;
        
        private UITestsprdWindow20 mUITestsprdWindow20;
        
        private UITestsprdWindow21 mUITestsprdWindow21;
        
        private UITestsprdWindow22 mUITestsprdWindow22;
        
        private UITestsprdWindow23 mUITestsprdWindow23;
        
        private UITestsprdWindow24 mUITestsprdWindow24;
        
        private UITestsprdWindow25 mUITestsprdWindow25;
        
        private UITestsprdWindow26 mUITestsprdWindow26;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a1valueis10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a1valueis10Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Bharath\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '10' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a1is10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a1is10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals '10'
        /// </summary>
        public string UICValueEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a2isa1a310'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a2isa1a310Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1+a3+10' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "=a1+a3+10";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a3is1000'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a3is1000Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1000' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "1000";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a2is1020'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a2is1020ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals '1020'
        /// </summary>
        public string UICValueEditText = "1020";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a1isStringsoA2isString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a1isStringsoA2isStringParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Bharath\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'sdflkaj' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "sdflkaj";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=a1' in 'cContent' text box
        /// </summary>
        public string UICContentEditText1 = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a2isStringfromA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a2isStringfromA1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals 'sdflkaj'
        /// </summary>
        public string UICValueEditText = "sdflkaj";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a1isadfaf'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a1isadfafParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Bharath\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'adfaf' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "adfaf";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a1isString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a1isStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals 'adfaf'
        /// </summary>
        public string UICValueEditText = "adfaf";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a2isa1string'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a2isa1stringParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a1isa2stringcheck1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a1isa2stringcheck1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals 'adfaf'
        /// </summary>
        public string UICValueEditText = "adfaf";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NoValueTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class NoValueTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Bharath\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'afasdf' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "afasdf";
        
        /// <summary>
        /// Type '=A1+3' in 'cContent' text box
        /// </summary>
        public string UICContentEditText1 = "=A1+3";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'closeTest3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class closeTest3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals 'N/Value'
        /// </summary>
        public string UICValueEditText = "N/Value";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'openTesting1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class openTesting1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Bharath\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'dsfasdf' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "dsfasdf";
        
        /// <summary>
        /// Type 'sadfasdf' in 'cContent' text box
        /// </summary>
        public string UICContentEditText1 = "sadfasdf";
        
        /// <summary>
        /// Type 'wefw' in 'cContent' text box
        /// </summary>
        public string UICContentEditText2 = "wefw";
        
        /// <summary>
        /// Type 'wfwef' in 'cContent' text box
        /// </summary>
        public string UICContentEditText3 = "wfwef";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'openTesting2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class openTesting2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Bharath\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'sdfasdf' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "sdfasdf";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'I am not having fun ' in 'cContent' text box
        /// </summary>
        public string UICContentEditText1 = "I am not having fun ";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NotHavingFUn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class NotHavingFUnExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals 'I am not having fun '
        /// </summary>
        public string UICValueEditText = "I am not having fun ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveWork'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveWorkExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals 'I am not having fun '
        /// </summary>
        public string UICValueEditText = "I am not having fun ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'bigTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class bigTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + c' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "c";
        
        /// <summary>
        /// Type 'sdfasdf' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "sdfasdf";
        
        /// <summary>
        /// Type '{Right}{Up}{Down}{Down}{Right}{Up}{Left}{Down}{Down}{Left}{Right}{Up}{Left}{Up}{Left}{Right}{Left}{Down}{Right}{Up}{Left}{Up}{Left}{Up}{Right}{Left}{Down}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys1 = "{Right}{Up}{Down}{Down}{Right}{Up}{Left}{Down}{Down}{Left}{Right}{Up}{Left}{Up}{L" +
            "eft}{Right}{Left}{Down}{Right}{Up}{Left}{Up}{Left}{Up}{Right}{Left}{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestingMenuFuctionality'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class TestingMenuFuctionalityParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Bharath\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'dfasd' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "dfasd";
        
        /// <summary>
        /// Select 'randomtest1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "randomtest1";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'savet.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "savet.sprd";
        
        /// <summary>
        /// Type 'fdsfdsf' in 'cContent' text box
        /// </summary>
        public string UICContentEditText1 = "fdsfdsf";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a1is1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a1is1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Bharath\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=a2+1' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "=a2+1";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a1is1check'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a1is1checkExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals '1'
        /// </summary>
        public string UICValueEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'a1is1still'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class a1is1stillParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=a2+a1' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "=a2+a1";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'circularTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class circularTestExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals '1'
        /// </summary>
        public string UICValueEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'clear'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class clearParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowExePath = "C:\\Users\\Bharath\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheet1WindowAlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals ''
        /// </summary>
        public string UICValueEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'clearCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class clearCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cValue' text box equals ''
        /// </summary>
        public string UICValueEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'clear2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class clear2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=sakjfl' in 'cContent' text box
        /// </summary>
        public string UICContentEditText = "=sakjfl";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=b2+b2' in 'cContent' text box
        /// </summary>
        public string UICContentEditText1 = "=b2+b2";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'b1+2' in 'cContent' text box
        /// </summary>
        public string UICContentEditText2 = "b1+2";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=b1+2' in 'cContent' text box
        /// </summary>
        public string UICContentEditText3 = "=b1+2";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '=b3' in 'cContent' text box
        /// </summary>
        public string UICContentEditText4 = "=b3";
        
        /// <summary>
        /// Type '{Enter}' in 'cContent' text box
        /// </summary>
        public string UICContentEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Select 'idont know' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "idont know";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'sdf' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "sdf";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1Window : WinWindow
    {
        
        public UISpreadsheet1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet 1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet 1");
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("savet.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow(this);
                }
                return this.mUICContentWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICValueWindow UICValueWindow
        {
            get
            {
                if ((this.mUICValueWindow == null))
                {
                    this.mUICValueWindow = new UICValueWindow(this);
                }
                return this.mUICValueWindow;
            }
        }
        
        public UISpreadsheet1TitleBar UISpreadsheet1TitleBar
        {
            get
            {
                if ((this.mUISpreadsheet1TitleBar == null))
                {
                    this.mUISpreadsheet1TitleBar = new UISpreadsheet1TitleBar(this);
                }
                return this.mUISpreadsheet1TitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow mUICContentWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UICValueWindow mUICValueWindow;
        
        private UISpreadsheet1TitleBar mUISpreadsheet1TitleBar;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow : WinWindow
    {
        
        public UICContentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICValueWindow : WinWindow
    {
        
        public UICValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cValue";
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICValueEdit
        {
            get
            {
                if ((this.mUICValueEdit == null))
                {
                    this.mUICValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICValueEdit.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUICValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1TitleBar : WinTitleBar
    {
        
        public UISpreadsheet1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet 1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet 1");
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("savet.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("savet.sprd");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public WinMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIEditMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
                    this.mUIEditMenuItem.WindowTitles.Add("savet.sprd");
                    #endregion
                }
                return this.mUIEditMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        
        private WinMenuItem mUIEditMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet 1");
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("savet.sprd");
            #endregion
        }
        
        #region Properties
        public UIOpenMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new UIOpenMenuItem(this);
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("savet.sprd");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenMenuItem : WinMenuItem
    {
        
        public UIOpenMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Spreadsheet 1");
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem1
        {
            get
            {
                if ((this.mUIOpenMenuItem1 == null))
                {
                    this.mUIOpenMenuItem1 = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem1.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIOpenMenuItem1.WindowTitles.Add("Spreadsheet 1");
                    #endregion
                }
                return this.mUIOpenMenuItem1;
            }
        }
        
        public WinMenuItem UINewWindowMenuItem
        {
            get
            {
                if ((this.mUINewWindowMenuItem == null))
                {
                    this.mUINewWindowMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewWindowMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New Window";
                    this.mUINewWindowMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewWindowMenuItem.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUINewWindowMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem1;
        
        private WinMenuItem mUINewWindowMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIChangesNotSavedWindow : WinWindow
    {
        
        public UIChangesNotSavedWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Changes Not Saved";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Changes Not Saved");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Changes Not Saved");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Changes Not Saved");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Changes Not Saved");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Changes Not Saved");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Changes Not Saved");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Changes Not Saved");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenFileWindow : WinWindow
    {
        
        public UIOpenFileWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow21 UIItemWindow21
        {
            get
            {
                if ((this.mUIItemWindow21 == null))
                {
                    this.mUIItemWindow21 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow21;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow21 mUIItemWindow21;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public UITestsprdListItem UITestsprdListItem
        {
            get
            {
                if ((this.mUITestsprdListItem == null))
                {
                    this.mUITestsprdListItem = new UITestsprdListItem(this);
                }
                return this.mUITestsprdListItem;
            }
        }
        
        public UISpreadsheet1sprdListItem UISpreadsheet1sprdListItem
        {
            get
            {
                if ((this.mUISpreadsheet1sprdListItem == null))
                {
                    this.mUISpreadsheet1sprdListItem = new UISpreadsheet1sprdListItem(this);
                }
                return this.mUISpreadsheet1sprdListItem;
            }
        }
        
        public UIProbstats1csprdListItem UIProbstats1csprdListItem
        {
            get
            {
                if ((this.mUIProbstats1csprdListItem == null))
                {
                    this.mUIProbstats1csprdListItem = new UIProbstats1csprdListItem(this);
                }
                return this.mUIProbstats1csprdListItem;
            }
        }
        
        public UISavetsprdListItem UISavetsprdListItem
        {
            get
            {
                if ((this.mUISavetsprdListItem == null))
                {
                    this.mUISavetsprdListItem = new UISavetsprdListItem(this);
                }
                return this.mUISavetsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestsprdListItem mUITestsprdListItem;
        
        private UISpreadsheet1sprdListItem mUISpreadsheet1sprdListItem;
        
        private UIProbstats1csprdListItem mUIProbstats1csprdListItem;
        
        private UISavetsprdListItem mUISavetsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdListItem : WinListItem
    {
        
        public UITestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test.sprd";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1sprdListItem : WinListItem
    {
        
        public UISpreadsheet1sprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Spreadsheet 1.sprd";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIProbstats1csprdListItem : WinListItem
    {
        
        public UIProbstats1csprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "probstats1c.sprd";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISavetsprdListItem : WinListItem
    {
        
        public UISavetsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "savet.sprd";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public UISavetsprdListItem1 UISavetsprdListItem
        {
            get
            {
                if ((this.mUISavetsprdListItem == null))
                {
                    this.mUISavetsprdListItem = new UISavetsprdListItem1(this);
                }
                return this.mUISavetsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISavetsprdListItem1 mUISavetsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISavetsprdListItem1 : WinListItem
    {
        
        public UISavetsprdListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "savet.sprd";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1sprdWindow : WinWindow
    {
        
        public UISpreadsheet1sprdWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet 1.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet 1.sprd");
            #endregion
        }
        
        #region Properties
        public UISpreadsheet1sprdTitleBar UISpreadsheet1sprdTitleBar
        {
            get
            {
                if ((this.mUISpreadsheet1sprdTitleBar == null))
                {
                    this.mUISpreadsheet1sprdTitleBar = new UISpreadsheet1sprdTitleBar(this);
                }
                return this.mUISpreadsheet1sprdTitleBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UICContentWindow1 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow1(this);
                }
                return this.mUICContentWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICValueWindow1 UICValueWindow
        {
            get
            {
                if ((this.mUICValueWindow == null))
                {
                    this.mUICValueWindow = new UICValueWindow1(this);
                }
                return this.mUICValueWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheet1sprdTitleBar mUISpreadsheet1sprdTitleBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UICContentWindow1 mUICContentWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UICValueWindow1 mUICValueWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet1sprdTitleBar : WinTitleBar
    {
        
        public UISpreadsheet1sprdTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet 1.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet 1.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet 1.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("Spreadsheet 1.sprd");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow1 : WinWindow
    {
        
        public UICContentWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("Spreadsheet 1.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("Spreadsheet 1.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet 1.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("Spreadsheet 1.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICValueWindow1 : WinWindow
    {
        
        public UICValueWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cValue";
            this.WindowTitles.Add("Spreadsheet 1.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICValueEdit
        {
            get
            {
                if ((this.mUICValueEdit == null))
                {
                    this.mUICValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICValueEdit.WindowTitles.Add("Spreadsheet 1.sprd");
                    #endregion
                }
                return this.mUICValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIProbstats1csprdWindow : WinWindow
    {
        
        public UIProbstats1csprdWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "probstats1c.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("probstats1c.sprd");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIProbstats1csprdTitleBar UIProbstats1csprdTitleBar
        {
            get
            {
                if ((this.mUIProbstats1csprdTitleBar == null))
                {
                    this.mUIProbstats1csprdTitleBar = new UIProbstats1csprdTitleBar(this);
                }
                return this.mUIProbstats1csprdTitleBar;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICContentWindow2 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow2(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UIProbstats1csprdTitleBar mUIProbstats1csprdTitleBar;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UICContentWindow2 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("probstats1c.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("probstats1c.sprd");
            #endregion
        }
        
        #region Properties
        public UIOpenMenuItem1 UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new UIOpenMenuItem1(this);
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenMenuItem1 mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenMenuItem1 : WinMenuItem
    {
        
        public UIOpenMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("probstats1c.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewWindowMenuItem
        {
            get
            {
                if ((this.mUINewWindowMenuItem == null))
                {
                    this.mUINewWindowMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewWindowMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New Window";
                    this.mUINewWindowMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewWindowMenuItem.WindowTitles.Add("probstats1c.sprd");
                    #endregion
                }
                return this.mUINewWindowMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewWindowMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIProbstats1csprdTitleBar : WinTitleBar
    {
        
        public UIProbstats1csprdTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("probstats1c.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("probstats1c.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("probstats1c.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("probstats1c.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow2 : WinWindow
    {
        
        public UICContentWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("probstats1c.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("probstats1c.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenFileWindow2 : WinWindow
    {
        
        public UIOpenFileWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public UIOpenFileDialog UIOpenFileDialog
        {
            get
            {
                if ((this.mUIOpenFileDialog == null))
                {
                    this.mUIOpenFileDialog = new UIOpenFileDialog(this);
                }
                return this.mUIOpenFileDialog;
            }
        }
        
        public UIOpenFilePane UIOpenFilePane
        {
            get
            {
                if ((this.mUIOpenFilePane == null))
                {
                    this.mUIOpenFilePane = new UIOpenFilePane(this);
                }
                return this.mUIOpenFilePane;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenFileDialog mUIOpenFileDialog;
        
        private UIOpenFilePane mUIOpenFilePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenFileDialog : WinControl
    {
        
        public UIOpenFileDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Open File";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinPane UIOpenFilePane
        {
            get
            {
                if ((this.mUIOpenFilePane == null))
                {
                    this.mUIOpenFilePane = new WinPane(this);
                    #region Search Criteria
                    this.mUIOpenFilePane.SearchProperties[WinControl.PropertyNames.Name] = "Open File";
                    this.mUIOpenFilePane.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUIOpenFilePane;
            }
        }
        #endregion
        
        #region Fields
        private WinPane mUIOpenFilePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenFilePane : WinPane
    {
        
        public UIOpenFilePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Open File";
            this.WindowTitles.Add("Open File");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Open File");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet2Window : WinWindow
    {
        
        public UISpreadsheet2Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet 2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet 2");
            #endregion
        }
        
        #region Properties
        public UISpreadsheet2TitleBar UISpreadsheet2TitleBar
        {
            get
            {
                if ((this.mUISpreadsheet2TitleBar == null))
                {
                    this.mUISpreadsheet2TitleBar = new UISpreadsheet2TitleBar(this);
                }
                return this.mUISpreadsheet2TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheet2TitleBar mUISpreadsheet2TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheet2TitleBar : WinTitleBar
    {
        
        public UISpreadsheet2TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet 2");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet 2");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHELPWindow : WinWindow
    {
        
        public UIHELPWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "HELP";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("HELP");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("HELP");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("HELP");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveSpreadsheetFilesWindow : WinWindow
    {
        
        public UISaveSpreadsheetFilesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Spreadsheet Files";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow5 mUIItemWindow;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save Spreadsheet Files");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save Spreadsheet Files");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save Spreadsheet Files");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save Spreadsheet Files");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDropDownMenu UIDropDownMenu
        {
            get
            {
                if ((this.mUIDropDownMenu == null))
                {
                    this.mUIDropDownMenu = new UIDropDownMenu(this);
                }
                return this.mUIDropDownMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIDropDownMenu mUIDropDownMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDropDownMenu : WinMenu
    {
        
        public UIDropDownMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "DropDown";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIEmptySpreadsheetMenuItem
        {
            get
            {
                if ((this.mUIEmptySpreadsheetMenuItem == null))
                {
                    this.mUIEmptySpreadsheetMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIEmptySpreadsheetMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Empty Spreadsheet";
                    #endregion
                }
                return this.mUIEmptySpreadsheetMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIEmptySpreadsheetMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow : WinWindow
    {
        
        public UITestsprdWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow6 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow1 : WinWindow
    {
        
        public UITestsprdWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow3 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow3(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow3 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow3 : WinWindow
    {
        
        public UICContentWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow2 : WinWindow
    {
        
        public UITestsprdWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow4 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow4(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow4 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow4 : WinWindow
    {
        
        public UICContentWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow3 : WinWindow
    {
        
        public UITestsprdWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow7 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow7(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow7 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow4 : WinWindow
    {
        
        public UITestsprdWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow5 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow5(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow5 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow5 : WinWindow
    {
        
        public UICContentWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow5 : WinWindow
    {
        
        public UITestsprdWindow5()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow6 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow6(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow6 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow6 : WinWindow
    {
        
        public UICContentWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow6 : WinWindow
    {
        
        public UITestsprdWindow6()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow8 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow8(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow8 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow7 : WinWindow
    {
        
        public UITestsprdWindow7()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow7 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow7(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow7 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow7 : WinWindow
    {
        
        public UICContentWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow8 : WinWindow
    {
        
        public UITestsprdWindow8()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow8 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow8(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow8 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow8 : WinWindow
    {
        
        public UICContentWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow9 : WinWindow
    {
        
        public UITestsprdWindow9()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow9 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow9(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow9 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow10 : WinWindow
    {
        
        public UITestsprdWindow10()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow10 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow10(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow10 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow11 : WinWindow
    {
        
        public UITestsprdWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow13 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow13(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow13 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow12 : WinWindow
    {
        
        public UITestsprdWindow12()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow9 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow9(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow9 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow9 : WinWindow
    {
        
        public UICContentWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow13 : WinWindow
    {
        
        public UITestsprdWindow13()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow10 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow10(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow10 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow10 : WinWindow
    {
        
        public UICContentWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow14 : WinWindow
    {
        
        public UITestsprdWindow14()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow14 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow14(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow14 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow14 : WinWindow
    {
        
        public UIItemWindow14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow15 : WinWindow
    {
        
        public UITestsprdWindow15()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow15 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow15(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow15 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow15 : WinWindow
    {
        
        public UIItemWindow15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow16 : WinWindow
    {
        
        public UITestsprdWindow16()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow11 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow11(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow11 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow11 : WinWindow
    {
        
        public UICContentWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow17 : WinWindow
    {
        
        public UITestsprdWindow17()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICContentWindow12 UICContentWindow
        {
            get
            {
                if ((this.mUICContentWindow == null))
                {
                    this.mUICContentWindow = new UICContentWindow12(this);
                }
                return this.mUICContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICContentWindow12 mUICContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICContentWindow12 : WinWindow
    {
        
        public UICContentWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cContent";
            this.WindowTitles.Add("test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICContentEdit
        {
            get
            {
                if ((this.mUICContentEdit == null))
                {
                    this.mUICContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICContentEdit.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUICContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow18 : WinWindow
    {
        
        public UITestsprdWindow18()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow16 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow16(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow16 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow16 : WinWindow
    {
        
        public UIItemWindow16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow19 : WinWindow
    {
        
        public UITestsprdWindow19()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow17 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow17(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow17 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow17 : WinWindow
    {
        
        public UIItemWindow17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow20 : WinWindow
    {
        
        public UITestsprdWindow20()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow18 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow18(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow18 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow18 : WinWindow
    {
        
        public UIItemWindow18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow21 : WinWindow
    {
        
        public UITestsprdWindow21()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("test.sprd");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow22 : WinWindow
    {
        
        public UITestsprdWindow22()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar3 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar3(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar3 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar3 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem3 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem3(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem3 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem3 : WinMenuItem
    {
        
        public UIFileMenuItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("test.sprd");
                    this.mUISaveAsMenuItem.WindowTitles.Add("probstats1c.sprd");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveAsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow23 : WinWindow
    {
        
        public UITestsprdWindow23()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar4 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar4(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar4 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar4 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFileMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
                    this.mUIFileMenuItem.WindowTitles.Add("test.sprd");
                    this.mUIFileMenuItem.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
                    this.mUIFileMenuItem.WindowTitles.Add("probstats1c.sprd");
                    #endregion
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow24 : WinWindow
    {
        
        public UITestsprdWindow24()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UIItemWindow19 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow19(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow19 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow19 : WinWindow
    {
        
        public UIItemWindow19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISPanelClient
        {
            get
            {
                if ((this.mUISPanelClient == null))
                {
                    this.mUISPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISPanelClient.WindowTitles.Add("test.sprd");
                    this.mUISPanelClient.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUISPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow25 : WinWindow
    {
        
        public UITestsprdWindow25()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICUsersBharathDesktopTitleBar UICUsersBharathDesktopTitleBar
        {
            get
            {
                if ((this.mUICUsersBharathDesktopTitleBar == null))
                {
                    this.mUICUsersBharathDesktopTitleBar = new UICUsersBharathDesktopTitleBar(this);
                }
                return this.mUICUsersBharathDesktopTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICUsersBharathDesktopTitleBar mUICUsersBharathDesktopTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersBharathDesktopTitleBar : WinTitleBar
    {
        
        public UICUsersBharathDesktopTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdWindow26 : WinWindow
    {
        
        public UITestsprdWindow26()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("test.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\idont know.sprd");
            this.WindowTitles.Add("probstats1c.sprd");
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public UICUsersBharathDesktopTitleBar1 UICUsersBharathDesktopTitleBar
        {
            get
            {
                if ((this.mUICUsersBharathDesktopTitleBar == null))
                {
                    this.mUICUsersBharathDesktopTitleBar = new UICUsersBharathDesktopTitleBar1(this);
                }
                return this.mUICUsersBharathDesktopTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICUsersBharathDesktopTitleBar1 mUICUsersBharathDesktopTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICUsersBharathDesktopTitleBar1 : WinTitleBar
    {
        
        public UICUsersBharathDesktopTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\Bharath\\Desktop\\sdf.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
